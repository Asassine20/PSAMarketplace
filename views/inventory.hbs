<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="stylesheet" href="/style.css">
    <title>Document</title>
</head>
<body>
    <div id="spinner" style="display:none;">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>

    <nav>
        <h4 style="font-size:13px">Logo Placeholder</h4>
        <ul>
            <li><a href="/dashboard">Home</a></li>
            <li><a href="/inventory">Inventory</a></li>
            <li><a href="/dashboard">Pricing</a></li>
            <li><a href="/dashboard">Orders</a></li>
            <li><a href="/dashboard">Messages</a></li>
            <li><a href="/dashboard">Feedback</a></li>
            <li><a href="/dashboard">Payments</a></li>
            <li><a href="/dashboard">Reports</a></li>
        </ul>
    </nav>
    <h4>{{username}} Inventory</h4>
    <div class="inventorySearch" style="display: flex; justify-content: space-between; align-items: center;">
        <form action="/inventory" method="get" style="flex-grow 1">
            <div>
                <label for="searchTerm">Player:</label>
                <input type="text" id="searchTerm" name="searchTerm" class="filter-input fixed-width-dropdown" placeholder="Player Name" value="{{searchTerm}}">
            </div>
            <div>
                <label for="sport">Sport:</label>
                <select id="sport" name="sport" class="filter-input fixed-width-dropdown">
                    <option value="">All Sports</option>
                    {{#each sports}}
                    <option value="{{this}}">{{this}}</option>
                    {{/each}}
                </select>
            </div>
            <div class="dropdown">
                <label for="cardSet">Card Set:</label>
                <input type="text" id="cardSetSearch" placeholder="Search sets..." onkeyup="debouncedSearchCardSets(this.value)" class="filter-input fixed-width-input" />
                <div class="dropdown-content consistent-width-dropdown">
                    <select id="cardSet" name="cardSet" class="filter-input fixed-width-dropdown">
                        <option value="">All Sets</option>
                    </select>
                </div>
            </div>

            <div>
                <label for="cardYear">Card Year:</label>
                <select id="cardYear" name="cardYear" class="filter-input fixed-width-dropdown">
                    <option value="">All Years</option>
                    {{#each cardYears}}
                    <option value="{{this}}" {{#if (eq this ../cardYear)}}selected{{/if}}>{{this}}</option>
                    {{/each}}
                </select>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <button type="submit" class="filter-input fixed-width-dropdown">Search</button>
                </div>
                <div>
                    <button id="resetButton" type="reset" class="filter-input fixed-width-dropdown" onclick="resetFilters()">Reset</button>
                </div>
            </div>
        </form>
    </div>

<div class="table-container">
    <table>
        <!-- Table Title and Results as Caption -->
        <caption>
            <div class="table-header">
                <h2>Product Catalog</h2>
                <span>{{totalItems}} Results</span>
            </div>
        </caption>

        <thead>
            <tr>
                <th>Sport</th>
                <th>Image</th>
                <th>Name</th>
                <th>Set</th>
                <th>Year</th>
                <th>Number</th>
                <th>Color</th>
                <th>Variant</th>
                <th style="width:100px;"></th>
            </tr>
        </thead>
        <tbody>
            {{#each cards}}
            <tr>
                <td>{{this.Sport}}</td>
                <td><img src="{{this.CardImage}}" alt="Card Image"></td>
                <td>{{this.CardName}}</td>
                <td>{{this.CardSet}}</td>
                <td>{{this.CardYear}}</td>
                <td>{{this.CardNumber}}</td>
                <td>{{this.CardColor}}</td>
                <td>{{this.CardVariant}}</td>
                <td class="button-cell">
                    <button type="button" onclick="window.location.href='/update-inventory-pricing?cardId={{this.CardID}}'" class="table-button">Add</button>
                </td>
            </tr>            
            {{else}}
            <tr><td colspan="9">No cards found</td></tr>
            {{/each}}
        </tbody>
    </table>

    <nav aria-label="Page navigation" class="pagination-bottom">
        <ul class="pagination">
            {{#if showPrevious}}
            <li class="page-item">
                <a class="page-link" href="?page={{minus currentPage 1}}&searchTerm={{searchTerm}}&cardSet={{cardSet}}&cardYear={{cardYear}}&sport={{sport}}">
                    Previous
                </a>
            </li>
            {{/if}}
            {{#if showNext}}
            <li class="page-item">
                <a class="page-link" href="?page={{plus currentPage 1}}&searchTerm={{searchTerm}}&cardSet={{cardSet}}&cardYear={{cardYear}}&sport={{sport}}">
                    Next
                </a>
            </li>
            {{/if}}
        </ul>

    </nav>
</div>

<script>
    // Populates the dropdown menus based on user selections
    function loadSetsAndYears(caller) {
        // Disable the dropdowns while loading
        document.getElementById('sport').disabled = true;
        document.getElementById('cardSet').disabled = true;
        document.getElementById('cardYear').disabled = true;

        // Displays spinner while loading
        document.getElementById('spinner').style.display = 'flex';

        // Retrieves the value of the element (sport, cardSet, cardYear) from the user input on the dropdown,
        // and stores it in the const variable
        const sport = document.getElementById('sport').value;
        const cardSet = document.getElementById('cardSet').value;
        const year = document.getElementById('cardYear').value;

        // Fetch sports based on card set and year
        // Sends a HTTP GET request to server endpoint '/sports' with parameters cardSet and year
        fetch(`/sports?cardSet=${encodeURIComponent(cardSet)}&year=${encodeURIComponent(year)}`)
            // Converts the response from JSON to a JavaScript object
            .then(response => response.json())
            .then(sports => {
                // Resets the content for the sport dropdown menu
                const sportSelect = document.getElementById('sport');
                // Starts the sport dropdown menu with 'All Sports' initially
                sportSelect.innerHTML = '<option value="">All Sports</option>';
                // Iterates over each item in the sports array and creates a new option element for each sport
                sports.forEach(sportItem => {
                    const option = document.createElement('option');
                    option.value = sportItem;
                    option.textContent = sportItem;
                    if (sportItem === sport) {
                        option.selected = true;
                    }
                    sportSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error loading sports:', error));

        // Fetch card sets based on sport and year
        // Sends a HTTP GET request to server endpoint '/cardsets' with parameters sport and year
        fetch(`/cardsets?sport=${encodeURIComponent(sport)}&year=${encodeURIComponent(year)}`)
            .then(response => response.json())
            .then(sets => {
                const setSelect = document.getElementById('cardSet');
                setSelect.innerHTML = '<option value="">All Sets</option>';
                sets.forEach(setItem => {
                    const option = document.createElement('option');
                    option.value = setItem;
                    option.textContent = setItem;
                    if (setItem === cardSet) {
                        option.selected = true;
                    }
                    setSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error loading card sets:', error));

        // Fetch years based on sport and card set
        // Sends a HTTP GET request to server endpoint '/years' with parameters sport and cardset
        fetch(`/years?sport=${encodeURIComponent(sport)}&cardSet=${encodeURIComponent(cardSet)}`)
            .then(response => response.json())
            .then(years => {
                const yearSelect = document.getElementById('cardYear');
                yearSelect.innerHTML = '<option value="">All Years</option>';
                years.forEach(yearItem => {
                    const option = document.createElement('option');
                    option.value = yearItem;
                    option.textContent = yearItem;
                    if (yearItem === year) {
                        option.selected = true;
                    }
                    yearSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error loading years:', error))
            .finally(() => {
                // Re-enable dropdowns and hide spinner after fetching is complete
                document.getElementById('sport').disabled = false;
                document.getElementById('cardSet').disabled = false;
                document.getElementById('cardYear').disabled = false;
                // Removes the display of the spinner after fetching is complete
                document.getElementById('spinner').style.display = 'none';
            });
    }

    // JavaScript function to filter card set options
    function filterCardSets() {
        // Declares variables input, filter, ul, li, a, and i
        var input, filter, ul, li, a, i;
        // Assigns the value of the cardSetSearch to input variable
        input = document.getElementById('cardSetSearch');
        // Converts the value of input to upper case
        filter = input.value.toUpperCase();
        // Stores the cardSet dropdown menu in the select variable
        var select = document.getElementById("cardSet");
        // Gets all of the option elements within the select element and stores them in the options variable as a collection
        var options = select.getElementsByTagName('option');
        // Iterates through each option in the dropdown menu
        for (i = 1; i < options.length; i++) { // Start from 1 to skip the placeholder option
            // Extracts the text content from each option in the dropdown menu (the select element)
            txtValue = options[i].textContent;
            // Searches the filter string within the txtValue and returns the index of the first occurrence of a specified value in a string
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                // If the option contains the search term, it remains in the dropdown menu
                options[i].style.display = "";
            } else {
                // If the option doesn't contain the search term, it gets hidden from the dropdown menu
                options[i].style.display = "none";
            }
        }
    }
    
    // Makes an API call to fetch card sets based on search term and optionally filtered by sport and year
    function searchCardSets(searchTerm) {
        // Stores the value of the sport selected into the sport variable
        const sport = document.getElementById('sport').value;
        // Stores the value of the year selected into the year variable
        const year = document.getElementById('cardYear').value;
        // Starts constructing the URL for the API call and appends the search term as a query
        let url = `/search-card-sets?term=${encodeURIComponent(searchTerm)}`;
        // Checks if a sport has been selected and appends it to the URL
        if (sport) {
            url += `&sport=${encodeURIComponent(sport)}`;
        }
        // Checks if a year has been selected and appends it to the URL
        if (year) {
            url += `&year=${encodeURIComponent(year)}`;
        }
        // Sends a request to the server at the constructed URL
        fetch(url)
            // Processes the response by converting it to JSON
            .then(response => response.json())
            // Takes the data (array of card sets) and calls the populateDropdown function to update the dropdown with the values
            .then(sets => populateDropdown(sets))
            .catch(error => console.error('Error:', error));
    }

    // Selects the element with the ID sport and updates the CardSet dropdown based on the current selection
    document.getElementById('sport').addEventListener('change', () => {
        searchCardSets(document.getElementById('cardSetSearch').value);
    });

    // Selects the element with the ID cardYear and updates the CardSet dropdown based on the current selection
    document.getElementById('cardYear').addEventListener('change', () => {
        searchCardSets(document.getElementById('cardSetSearch').value);
    });

    // This function populates the dropdown with the results
    function populateDropdown(sets) {
        // Accesses the dropdown element with the ID cardSet amd assigns it to variable setSelect
        const setSelect = document.getElementById('cardSet');
        // Clears any existing options in the dropdown and adds a default option of 'All Sets' to serve as a placeholder
        setSelect.innerHTML = '<option value="">All Sets</option>'; 
        // Loops through the sets 
        sets.forEach(set => {
            // Creates an option element for the dropdown 
            const option = document.createElement('option');
            // Makes the set as the value of the option
            option.value = set;
            // Makes the set as the text content for the option
            option.textContent = set;
            // Appends the newly created option to the dropdown
            setSelect.appendChild(option);
        });
    }

    // The debounce function
    function debounce(callback, delay) {
        let timeout;
        // Returns a new function that can take any number of arguments
        return (...args) => {
            // Clears any existing timeout associated with the timeout variable
            clearTimeout(timeout);
            // Sets a new timeout that will execute the function after the specified delay 
            timeout = setTimeout(() => {
                // The apply method allows us to invoke callback with a specific 'this' value and 'args' array
                callback.apply(this, args);
            }, delay);
        };
    }

    // Debounce function to limit the number of searches during typing
    var debouncedSearchCardSets = debounce(function(searchTerm) {
        searchCardSets(searchTerm);
    }, 400);

    // Attach the debounced function to the keyup event
    document.getElementById('cardSetSearch').addEventListener('keyup', function(e) {
        debouncedSearchCardSets(e.target.value);
    });

    function resetFilters() {
        // Clear the player search term
        document.getElementById('searchTerm').value = '';

        // Reset dropdowns to their default option
        document.getElementById('sport').selectedIndex = 0;
        document.getElementById('cardSet').selectedIndex = 0;
        document.getElementById('cardYear').selectedIndex = 0;

        // If you need to fetch initial data for sports and years dropdowns, call the loadSetsAndYears function
        // with null or a proper identifier if required by your implementation
        loadSetsAndYears(null);
    }
    document.getElementById('resetButton').addEventListener('click', resetFilters);

    // Modify event listeners to include the caller (sport or set)
    document.getElementById('sport').addEventListener('change', () => loadSetsAndYears('sport'));
    document.getElementById('cardSet').addEventListener('change', () => loadSetsAndYears('set'));
    document.getElementById('cardYear').addEventListener('change', () => loadSetsAndYears('year'));

</script>

</body>