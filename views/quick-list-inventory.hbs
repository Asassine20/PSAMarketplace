<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <title>Document</title>
</head>
<body>
    <nav>
        <h4 style="font-size:13px">Logo Placeholder</h4>
        <ul>
            <li><a href="/admin/dashboard">Home</a></li>
            <li><a href="/admin/inventory">Inventory</a></li>
            <li>
                <a href="/admin/orders">Orders 
                    {{#if ordersCount}}
                        <span class="notification-bubble">{{ordersCount}}</span>
                    {{/if}}
                </a>
            </li>
            <li>
                <a href="/admin/messages">Messages 
                    {{#if messagesCount}}
                        <span class="notification-bubble">{{messagesCount}}</span>
                    {{/if}}
                </a>
            </li>
            <li><a href="/admin/feedback">Feedback</a></li>
            <li><a href="/admin/payments">Payments</a></li>
            <li><a href="/admin/dashboard">Reports</a></li>
            <li><a href="/admin/logout">Logout</a></li>
        </ul>
    </nav>
<form action="/admin/submit-inventory" method="post">
    <div class="flex-container">
        <div class="table-container" id="grades-table">
            <table>
                <thead>
                    <tr>
                        <th>Card Image</th>
                        <th>Grade</th>
                        <th>Market Price</th>
                        <th>Your Sale Price</th>
                        <th>Cert Number</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Example row with dynamic content for illustration -->
                    {{#if existingInventory}}
                    <tr>
                        <td>
                            <img src="{{existingInventory.CardImage}}" alt="Card Image" class="card-image"> <!-- Assuming existingInventory.CardImage contains the URL -->
                        </td>
                        <td>
                            <select name="gradeIds[]">
                                {{#each grades}}
                                <option value="{{this.gradeId}}" {{#if (eq this.gradeId ../existingInventory.GradeId)}}selected{{/if}}>{{this.gradeValue}}</option>
                                {{/each}}
                            </select>
                        </td>
                        <td>
                            <!-- Market Price can be dynamically filled if needed -->
                        </td>
                        <td>
                            <input type="text" name="salePrices[]" value="{{existingInventory.SalePrice}}">
                        </td>
                        <td>
                            <input type="text" name="certNumbers[]" value="{{existingInventory.CertNumber}}">
                        </td>
                        <td>
                            <button type="button" onclick="addRow()">+</button>
                        </td>
                    </tr>
                    {{else}}
                    <!-- Placeholder for a new row structure -->
                    <tr>
                        <td>
                            <img src="" alt="Card Image" class="card-image"> <!-- Placeholder image element -->
                        </td>
                        <td>
                            <select name="gradeIds[]">
                                {{#each grades}}
                                <option value="{{this.gradeId}}">{{this.gradeValue}}</option>
                                {{/each}}
                            </select>
                        </td>
                        <td>
                            <!-- Market Price placeholder -->
                        </td>
                        <td>
                            <input type="text" name="salePrices[]" value="">
                        </td>
                        <td>
                            <input type="text" name="certNumbers[]" onchange="fetchAndPopulateCardData(this)">
                        </td>
                        <td>
                            <button type="button" onclick="addRow()">+</button>
                        </td>
                    </tr>
                    {{/if}}
                </tbody>
            </table>
        </div>

    </div>

    <input type="hidden" name="cardId" value="{{cardDetails.CardID}}">
    <input type="hidden" name="listingId" value="{{existingInventory.ListingID}}">
    
    <div class="button-container">
        <button style="border-radius: 4px;" type="submit">{{#if existingInventory.ListingID}}Update{{else}}Submit{{/if}}</button>
    </div>
</form>
<script>
    async function addRow() {
        const tableBody = document.querySelector("#grades-table tbody");
        const newRow = document.createElement("tr");
        newRow.innerHTML = `
            <td>
                <input type="text" name="certNumbers[]" placeholder="Enter Cert Number" onchange="fetchAndPopulateCardData(this)">
            </td>
            <td>
                <img src="" alt="Card Image" class="card-image">
            </td>
            <td>
                <select name="gradeIds[]">
                    <!-- Grades dropdown populated dynamically based on API or predefined list -->
                </select>
            </td>
            <td>
                <input type="text" name="salePrices[]" value="" placeholder="Sale Price">
            </td>
        `;
        tableBody.appendChild(newRow);
    }

    async function fetchAndPopulateCardData(inputElement) {
        const certNumber = inputElement.value;
        if (!certNumber) return;

        // Define the URL for the fetch request using the correct endpoint
        const url = `/api/admin/fetch-card-data?certNumber=${certNumber}`; // Adjusted to match the correct server-side endpoint

        try {
            const response = await fetch(url);
            // Check if the response is OK (status in the range 200-299)
            if (!response.ok) {
                throw new Error(`Error fetching card data: ${response.statusText}`);
            }
            const cardData = await response.json();

            // Now populate the row based on fetched cardData
            const row = inputElement.closest("tr");
            
            // Assuming cardData contains the card image URL under a property like cardData.cardImage
            const imgElement = row.querySelector("img.card-image");
            if (imgElement && cardData.cardImage) {
                imgElement.src = cardData.cardImage;
                imgElement.alt = "Card Image";
                imgElement.classList.replace("card-image", "card-image");
            }
            // Log card data to the console (optional, for debugging purposes)
            console.log(cardData);

            // You can also populate other fields if necessary, similar to how you handle the image
            // Example:
            // row.querySelector('.card-year').value = cardData.year;
            // Populate other card details in the row as needed...

        } catch (error) {
            console.error('Error fetching card data:', error);
            // Handle the error, e.g., show an error message to the user
        }
    }
    async function fetchAndDisplayImage(certNumber) {
        if (!certNumber) return; // Skip if certNumber is empty
        try {
            const response = await fetch(`/api/admin/fetch-image?certNumber=${certNumber}`);
            const data = await response.json();
            if (data.frontImageUrl) {
                // Assuming you have a dedicated place to show the image
                document.querySelector(".card-image").src = data.frontImageUrl;
                document.querySelector(".card-image").alt = "Fetched Card Image";
            }
        } catch (error) {
            console.error('Error fetching image:', error);
        }
    }
    document.addEventListener("DOMContentLoaded", function() {
    // Add event listener to cert number input fields
    document.querySelectorAll('input[name="certNumbers[]"]').forEach(input => {
        input.addEventListener('change', async function() {
            const certNumber = this.value;
            if (!certNumber) return; // Skip if certNumber is empty

            try {
                const response = await fetch(`/fetch-card-image?certNumber=${certNumber}`);
                const data = await response.json();
                if (data.frontImageUrl) {
                    // Update the src of the image element to show the fetched image
                    const imgElement = document.querySelector(".card-image");
                    if (imgElement) {
                        imgElement.src = data.frontImageUrl;
                        imgElement.style.display = 'block'; // Make sure to display the image if it was hidden
                    }
                }
            } catch (error) {
                console.error('Error fetching image:', error);
            }
        });
    });
});
async function fetchCardDataByCertNumber(certNumber) {
    try {
        // Adjusted to call your backend endpoint, which then calls the PSA Card API
        const response = await fetch(`/api/admin/fetch-card-data?certNumber=${certNumber}`);
        if (!response.ok) {
            throw new Error(`Error fetching card data: ${response.statusText}`);
        }
        const data = await response.json();

        // Extracting the required card data from the response
        const cardData = {
            year: data.PSACert.Year,
            brand: data.PSACert.Brand,
            cardNumber: data.PSACert.CardNumber,
            cardGrade: data.PSACert.CardGrade,
            subject: data.PSACert.Subject,
            variety: data.PSACert.Variety
        };

        return cardData;
    } catch (error) {
        console.error('Error in fetchCardDataByCertNumber:', error);
        throw error; // Rethrow or handle as needed
    }
}
async function populateCardDataFromCert(certInput) {
    const certNumber = certInput.value;
    if (!certNumber) return;

    try {
        const cardData = await fetchCardDataByCertNumber(certNumber);

        // Assuming you have a way to reference the specific row's fields you want to populate
        const row = certInput.closest('tr'); // Or some other way to target the specific row
        row.querySelector('.card-year').value = cardData.year;
        row.querySelector('.card-brand').value = cardData.brand;
        row.querySelector('.card-number').value = cardData.cardNumber;
        row.querySelector('.card-grade').value = cardData.cardGrade;
        row.querySelector('.card-subject').value = cardData.subject;
        row.querySelector('.card-variety').value = cardData.variety;

        // Update other UI elements as needed based on fetched data
    } catch (error) {
        console.error('Failed to populate card data from cert:', error);
        // Handle error, e.g., show an error message to the user
    }
}

</script>
</body>

</html>
