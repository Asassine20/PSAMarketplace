<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <title>Document</title>
</head>
<body>
    <nav>
        <h4 style="font-size:13px">Logo Placeholder</h4>
        <ul>
            <li><a href="/dashboard">Home</a></li>
            <li><a href="/inventory">Inventory</a></li>
            <li><a href="/orders">Orders</a></li>
            <li><a href="/messages">Messages</a></li>
            <li><a href="/dashboard">Feedback</a></li>
            <li><a href="/dashboard">Payments</a></li>
            <li><a href="/dashboard">Reports</a></li>
            <li><a href="/logout">Logout</a></li>
        </ul>
    </nav>
<form action="/submit-inventory" method="post">
    <div class="flex-container">
        <div class="product-info">
            <h2>Product Info</h2>
            {{#if cardDetails.CardImage}}
            <img src="{{cardDetails.CardImage}}" alt="Card Image" class="update-inventory-card-image">
            {{/if}}
            <p>Card Name: {{cardDetails.CardName}}</p>
            <p>Card Set: {{cardDetails.CardSet}}</p>
            <p>Card Year: {{cardDetails.CardYear}}</p>
            <p>Card Number: {{cardDetails.CardNumber}}</p>
            <p>Card Color: {{cardDetails.CardColor}}</p>
            <p>Card Variant: {{cardDetails.CardVariant}}</p>
        </div>

        <div class="table-container" id="grades-table">
            <table>
                <thead>
                    <tr>
                        <th>Grade</th>
                        <th>Market Price</th>
                        <th>Your Sale Price</th>
                        <th>Cert Number</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Check if there's existing inventory to pre-fill the form -->
                    {{#if existingInventory}}
                    <tr>
                        <td>
                            <select name="gradeIds[]">
                                {{#each grades}}
                                <option value="{{this.gradeId}}" {{#if (eq this.gradeId ../existingInventory.GradeId)}}selected{{/if}}>{{this.gradeValue}}</option>
                                {{/each}}
                            </select>
                        </td>
                        <td>
                            <!-- This cell is for Market Price, which you mentioned would be dynamically filled (presumably with JavaScript) -->
                            <!-- Ensure this cell either has content or a placeholder/comment indicating its purpose -->
                        </td>
                        <td>
                            <input type="text" name="salePrices[]" value="{{existingInventory.SalePrice}}">
                        </td>
                        <td>
                            <input type="text" name="certNumbers[]" value="{{existingInventory.CertNumber}}">
                        </td>
                        <td>
                            <button type="button" onclick="addRow()">+</button>
                        </td>
                    </tr>
                    {{else}}
                    <!-- You might want to include a default row structure here for when there's no existing inventory -->
                    <tr>
                        <td>
                            <select name="gradeIds[]">
                                {{#each grades}}
                                <option value="{{this.gradeId}}">{{this.gradeValue}}</option>
                                {{/each}}
                            </select>
                        </td>
                        <td>
                            <!-- Market Price placeholder or dynamic content -->
                        </td>
                        <td>
                            <input type="text" name="salePrices[]" value="">
                        </td>
                        <td>
                            <input type="text" name="certNumbers[]" value="">
                        </td>
                        <td>
                            <button type="button" onclick="addRow()">+</button>
                        </td>
                    </tr>
                    {{/if}}
                </tbody>
            </table>

        </div>
    </div>

    <input type="hidden" name="cardId" value="{{cardDetails.CardID}}">
    <input type="hidden" name="listingId" value="{{existingInventory.ListingID}}">
    
    <div class="button-container">
        <button style="border-radius: 4px;" type="submit" name="clearInventory" value="true" class="clear-inventory-button">Clear Inventory</button>
        <button style="border-radius: 4px;" type="submit">{{#if existingInventory.ListingID}}Update{{else}}Add{{/if}} Inventory</button>
    </div>
</form>
<script>
    function addRow() {
        const tableBody = document.querySelector("#grades-table tbody");
        const newRow = document.createElement("tr");
        newRow.innerHTML = `
            <td>
                <select name="gradeIds[]">
                    // Populate options dynamically or replicate from the first row
                </select>
            </td>
            <td>
                <!-- Market Price can be dynamically filled if needed -->
            </td>
            <td>
                <input type="text" name="salePrices[]" value="">
            </td>
            <td>
                <input type="text" name="certNumbers[]" onchange="fetchAndDisplayImage(this.value)">
            </td>
            <td>
                <button type="button" onclick="removeRow(this)">-</button>
            </td>
        `;
        tableBody.appendChild(newRow);
    }

    function removeRow(button) {
        button.parentElement.parentElement.remove();
    }
    async function fetchAndDisplayImage(certNumber) {
        if (!certNumber) return; // Skip if certNumber is empty
        try {
            const response = await fetch(`/api/fetch-image?certNumber=${certNumber}`);
            const data = await response.json();
            if (data.frontImageUrl) {
                // Assuming you have a dedicated place to show the image
                document.querySelector(".update-inventory-card-image").src = data.frontImageUrl;
                document.querySelector(".update-inventory-card-image").alt = "Fetched Card Image";
            }
        } catch (error) {
            console.error('Error fetching image:', error);
        }
    }
    document.addEventListener("DOMContentLoaded", function() {
    // Add event listener to cert number input fields
    document.querySelectorAll('input[name="certNumbers[]"]').forEach(input => {
        input.addEventListener('change', async function() {
            const certNumber = this.value;
            if (!certNumber) return; // Skip if certNumber is empty

            try {
                const response = await fetch(`/fetch-card-image?certNumber=${certNumber}`);
                const data = await response.json();
                if (data.frontImageUrl) {
                    // Update the src of the image element to show the fetched image
                    const imgElement = document.querySelector(".update-inventory-card-image");
                    if (imgElement) {
                        imgElement.src = data.frontImageUrl;
                        imgElement.style.display = 'block'; // Make sure to display the image if it was hidden
                    }
                }
            } catch (error) {
                console.error('Error fetching image:', error);
            }
        });
    });
});
</script>
</body>

</html>
